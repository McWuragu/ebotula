name: Build & CUnit Test

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DESTDIR: ${{ github.workspace }}/install

    steps:
      - name: Checkout via git
        run: |
          set -euxo pipefail
          git init .
          git config user.email "actions@users.noreply.github.com"
          git config user.name  "github-actions"
          git remote add origin "https://x-access-token:${TOKEN}@github.com/${REPO}.git"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch --depth=1 origin +refs/pull/${{ github.event.pull_request.number }}/merge:pr-merge
            git checkout pr-merge
          else
            git fetch --depth=1 origin "${{ github.ref }}"
            git checkout FETCH_HEAD
          fi
          git submodule update --init --recursive || true

      - name: Install build deps + gettext + CUnit + gdbm + crypt
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gcc make \
            autoconf automake libtool pkg-config \
            gettext autopoint \
            libcunit1 libcunit1-dev \
            libgdbm-dev libgdbm-compat-dev \
            libcrypt-dev

      - name: Bootstrap (gettextize + autoreconf)
        run: |
          set -euo pipefail
          mkdir -p m4
          if grep -q 'AM_GNU_GETTEXT' configure.ac; then
            test -d po || gettextize --force --copy --no-changelog
          fi
          autoreconf --install --force --verbose

      - name: Configure
        run: |
          set -euo pipefail
          ./configure

      - name: Build
        run: |
          set -euo pipefail
          make -j"$(nproc)"
          
      - name: Lint gettext translations (.po/.pot)
        run: |
          set -euo pipefail
          if [ ! -d po ]; then
            echo "No po/ directory found – translation checks skipped."
            exit 0
          fi

          # Finde ggf. eine POT-Datei als Referenz
          mapfile -t pots < <(find po -maxdepth 1 -type f -name '*.pot' | sort || true)
          pot="${pots[0]:-}"

          rc=0
          found_po=0

          while IFS= read -r -d '' po; do
            found_po=1
            echo "::group::Checking ${po}"

            # 1) formale Validierung (inkl. %-Formatstrings)
            if ! msgfmt -c --check-format -o /dev/null "$po"; then
              echo "msgfmt: Fehler in ${po}"
              rc=1
            fi

            # 2) unübersetzte / fuzzy Einträge zählen
            untranslated_count="$(msgattrib --untranslated --no-obsolete --no-location --no-wrap "$po" | grep -c '^msgid ' || true)"
            fuzzy_count="$(msgattrib --only-fuzzy --no-obsolete --no-location --no-wrap "$po" | grep -c '^msgid ' || true)"
            echo "Unübersetzt: ${untranslated_count}  |  Fuzzy: ${fuzzy_count}"

            if [ "${untranslated_count}" -gt 0 ] || [ "${fuzzy_count}" -gt 0 ]; then
              echo "❌ ${po} contains untranslated and/or fuzzy entries."
              rc=1
            fi

            # 3) Konsistenz gegen POT (falls vorhanden)
            if [ -n "$pot" ]; then
              if ! msgcmp --use-fuzzy --use-untranslated "$po" "$pot"; then
                echo "msgcmp: ${po} differs from ${pot} (missing or mismatched messages)."
                rc=1
              fi
            else
              echo "Note: No POT file found – msgcmp sync check skipped."
            fi

            echo "::endgroup::"
          done < <(find po -type f -name '*.po' -print0)

          if [ "$found_po" -eq 0 ]; then
            echo "Note: No POT file found – msgcmp sync check skipped."
            exit 0
          fi

          if [ "$rc" -ne 0 ]; then
            {
              echo "## Gettext checks failed"
              echo ""
              echo "- At least one .po file had errors, untranslated or fuzzy entries, or differs from the POT."
              echo "- Tip: Check locally with »msgattrib --untranslated <file.po>« or »msgattrib --only-fuzzy <file.po>«."
            } >> "$GITHUB_STEP_SUMMARY"
            exit 3
          fi
          
      - name: Run CUnit tests
        run: |
          set -euo pipefail
          if grep -qE '^[[:space:]]*check:' Makefile Makefile.in Makefile.am 2>/dev/null; then
            make check || { 
              echo "---- test-suite.log ----"
              find . -name test-suite.log -maxdepth 3 -print -exec sed -n '1,200p' {} \; || true
              exit 1
            }
          else
            echo "'make check' nicht definiert – suche Test-Binaries…"
            ran=0
            if [ -x ./testsuit/testsuit ]; then ./testsuit/testsuit && ran=1; fi
            mapfile -t bins < <(find . -type f \( -name "test_*" -o -name "*_tests" \) -perm -111 | sort || true)
            if [ "${#bins[@]}" -gt 0 ]; then for b in "${bins[@]}"; do "$b"; ran=1; done; fi
            if [ "$ran" -eq 0 ]; then echo "Keine Tests gefunden → Abbruch."; exit 2; fi
          fi

      - name: make distcheck (push only)
        if: ${{ github.event_name == 'push' }}
        run: |
          set -euo pipefail
          make distcheck || {
            echo "---- config.log ----"
            find . -name config.log -maxdepth 3 -print -exec sed -n '1,200p' {} \; || true
            exit 1
          }

      - name: make install (DESTDIR)
        run: |
          set -euo pipefail
          make install DESTDIR="$DESTDIR"

      - name: Summarize key logs (on failure)
        if: ${{ failure() }}
        run: |
          {
            echo "## Build/Test summary"
            echo ""
            echo "### config.log (snippet)"
            find . -name config.log -maxdepth 3 -print -exec sed -n '1,120p' {} \; || true
            echo ""
            echo "### test-suite.log (snippet)"
            find . -name test-suite.log -maxdepth 3 -print -exec sed -n '1,200p' {} \; || true
          } >> "$GITHUB_STEP_SUMMARY"
